/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è NeuroMail
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
class MailSlurpApp {
    constructor() {
        this.api = new MailSlurpApi();
        this.ui = new MailSlurpUI(this);
        this.generator = new DataGenerator();
        this.i18n = new I18nManager();
        this.performanceOptimizer = new PerformanceOptimizer();
        
        // –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.inboxes = [];
        this.emails = [];
        this.currentInboxId = null;
        this.isInitialized = false;
        
        // –ö—ç—à –¥–ª—è –ø–∏—Å–µ–º
        this.emailCache = new Map();
        this.cacheExpiry = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.settings = {
            autoDeleteInboxes: true,
            enableNotifications: true,
            emailCheckInterval: 5000,
            inboxLifetime: 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
        };
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NeuroMail...');
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            this.loadSettings();
            
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
            try {
                await this.checkApiConnection();
            } catch (apiError) {
                console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É:', apiError);
                this.ui.updateConnectionStatus(false);
            }
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω)
            try {
                await this.loadInboxes();
            } catch (loadError) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —è—â–∏–∫–∏:', loadError);
            }
            
            // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            this.setupAutoTasks();
            
            // –û–±–Ω–æ–≤–∏—Ç—å UI
            this.ui.updatePageLanguage();
            
            this.isInitialized = true;
            console.log('‚úÖ NeuroMail –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.ui.showToast(this.i18n.t('app_name') + ' –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!', 'success');
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            this.isInitialized = true;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
     */
    loadSettings() {
        try {
            const savedSettings = localStorage.getItem('neuroMail_settings');
            if (savedSettings) {
                this.settings = { ...this.settings, ...JSON.parse(savedSettings) };
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage
     */
    saveSettings() {
        try {
            localStorage.setItem('neuroMail_settings', JSON.stringify(this.settings));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
     */
    async checkApiConnection() {
        try {
            const status = await this.api.checkConnection();
            this.ui.updateConnectionStatus(status.connected);
            
            if (status.connected) {
                console.log('‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω:', status.userInfo);
            } else {
                console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', status.error);
                this.ui.showToast('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API', 'warning');
            }
            
            return status.connected;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:', error);
            this.ui.updateConnectionStatus(false);
            return false;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫
     */
    async createInbox() {
        try {
            this.ui.showModal('create-inbox-modal');
            
            const inbox = await this.api.createInbox({
                name: `NeuroMail-${Date.now()}`,
                description: '–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫',
                expiresAt: new Date(Date.now() + this.settings.inboxLifetime).toISOString()
            });
            
            this.inboxes.unshift(inbox);
            this.ui.updateInboxesList(this.inboxes);
            this.ui.updateInboxSelector(this.inboxes);
            
            this.ui.hideModal('create-inbox-modal');
            this.ui.showToast(this.i18n.t('inbox_created_success'), 'success');
            
            // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if (this.settings.autoDeleteInboxes) {
                this.scheduleInboxDeletion(inbox.id);
            }
            
            return inbox;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è—â–∏–∫–∞:', error);
            this.ui.hideModal('create-inbox-modal');
            this.ui.showToast(this.i18n.t('error_creating_inbox'), 'error');
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤
     */
    async loadInboxes() {
        try {
            this.ui.showLoading('inboxes-section');
            
            const inboxes = await this.api.getInboxes({ size: 50 });
            this.inboxes = inboxes || [];
            
            this.ui.updateInboxesList(this.inboxes);
            this.ui.updateInboxSelector(this.inboxes);
            
            this.ui.hideLoading('inboxes-section');
            
            return this.inboxes;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è—â–∏–∫–æ–≤:', error);
            this.ui.hideLoading('inboxes-section');
            this.ui.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è—â–∏–∫–æ–≤', 'error');
            return [];
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫
     * @param {string} inboxId - ID —è—â–∏–∫–∞
     */
    async deleteInbox(inboxId) {
        try {
            if (!confirm(this.i18n.t('confirm_delete_inbox'))) {
                return;
            }
            
            await this.api.deleteInbox(inboxId);
            
            this.inboxes = this.inboxes.filter(inbox => inbox.id !== inboxId);
            this.ui.updateInboxesList(this.inboxes);
            this.ui.updateInboxSelector(this.inboxes);
            
            // –û—á–∏—Å—Ç–∏—Ç—å –ø–∏—Å—å–º–∞ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π —è—â–∏–∫
            if (this.currentInboxId === inboxId) {
                this.emails = [];
                this.ui.updateEmailsList(this.emails);
                this.currentInboxId = null;
            }
            
            this.ui.showToast(this.i18n.t('inbox_deleted_success'), 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —è—â–∏–∫–∞:', error);
            this.ui.showToast(this.i18n.t('error_deleting_inbox'), 'error');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Å—å–º–∞ –¥–ª—è —è—â–∏–∫–∞
     * @param {string} inboxId - ID —è—â–∏–∫–∞
     * @param {boolean} forceRefresh - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    async loadEmailsForInbox(inboxId, forceRefresh = false) {
        try {
            this.currentInboxId = inboxId;
            this.ui.showLoading('emails-section');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (!forceRefresh) {
                const cachedEmails = this.getCachedEmails(inboxId);
                if (cachedEmails) {
                    this.emails = cachedEmails;
                    this.ui.updateEmailsList(this.emails);
                    this.ui.hideLoading('emails-section');
                    return this.emails;
                }
            }
            
            const emails = await this.api.getEmails(inboxId, { size: 50 });
            const newEmails = emails || [];
            
            // ÂéªÈáçÈÄªËæë - ÂêàÂπ∂Êñ∞ÈÇÆ‰ª∂ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            this.emails = this.deduplicateEmails([...this.emails, ...newEmails]);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.setCachedEmails(inboxId, this.emails);
            
            this.ui.updateEmailsList(this.emails);
            this.ui.hideLoading('emails-section');
            
            return this.emails;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º:', error);
            this.ui.hideLoading('emails-section');
            this.ui.showToast(this.i18n.t('error_loading_emails'), 'error');
            return [];
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –ø–∏—Å—å–º–∞
     */
    async loadEmails() {
        if (this.currentInboxId) {
            return await this.loadEmailsForInbox(this.currentInboxId);
        }
        return [];
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–∏—Å—å–º–∞
     */
    async refreshEmails() {
        if (this.currentInboxId) {
            // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è—â–∏–∫–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º
            this.clearEmailCache(this.currentInboxId);
            await this.loadEmailsForInbox(this.currentInboxId, true);
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–∏—Å–µ–º
     * @param {Array} emails - –ú–∞—Å—Å–∏–≤ –ø–∏—Å–µ–º
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
     */
    deduplicateEmails(emails) {
        const seen = new Set();
        const uniqueEmails = [];
        let duplicateCount = 0;

        for (const email of emails) {
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–∏—Å—å–º–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            const emailKey = this.createEmailKey(email);
            
            if (!seen.has(emailKey)) {
                seen.add(emailKey);
                uniqueEmails.push(email);
            } else {
                duplicateCount++;
                console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–∏—Å—å–º–∞:', email.subject || '(–ë–µ–∑ —Ç–µ–º—ã)');
            }
        }

        if (duplicateCount > 0) {
            this.ui.showToast(`–£–¥–∞–ª–µ–Ω–æ ${duplicateCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–∏—Å–µ–º`, 'info');
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        return uniqueEmails.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–∏—Å—å–º–∞
     * @param {Object} email - –ü–∏—Å—å–º–æ
     * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
     */
    createEmailKey(email) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–∏—Å—å–º–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
        if (email.id) {
            return `id:${email.id}`;
        }
        
        // –ï—Å–ª–∏ ID –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        const content = `${email.from || ''}-${email.subject || ''}-${email.body || ''}-${email.createdAt || ''}`;
        return `content:${this.hashString(content)}`;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Ö–µ—à —Å—Ç—Ä–æ–∫–∏
     * @param {string} str - –°—Ç—Ä–æ–∫–∞
     * @returns {string} –•–µ—à
     */
    hashString(str) {
        let hash = 0;
        if (str.length === 0) return hash.toString();
        
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32bit integer
        }
        
        return Math.abs(hash).toString(36);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
     * @param {string} inboxId - ID —è—â–∏–∫–∞
     * @returns {Array|null} –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –∏–ª–∏ null
     */
    getCachedEmails(inboxId) {
        const cacheKey = `emails_${inboxId}`;
        const cached = this.emailCache.get(cacheKey);
        
        if (cached && (Date.now() - cached.timestamp) < this.cacheExpiry) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –¥–ª—è —è—â–∏–∫–∞:', inboxId);
            return cached.emails;
        }
        
        return null;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∏—Å—å–º–∞ –≤ –∫—ç—à
     * @param {string} inboxId - ID —è—â–∏–∫–∞
     * @param {Array} emails - –ü–∏—Å—å–º–∞
     */
    setCachedEmails(inboxId, emails) {
        const cacheKey = `emails_${inboxId}`;
        this.emailCache.set(cacheKey, {
            emails: [...emails],
            timestamp: Date.now()
        });
        console.log('–ü–∏—Å—å–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è —è—â–∏–∫–∞:', inboxId);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–∏—Å–µ–º
     * @param {string} inboxId - ID —è—â–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    clearEmailCache(inboxId = null) {
        if (inboxId) {
            const cacheKey = `emails_${inboxId}`;
            this.emailCache.delete(cacheKey);
            console.log('–ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è —è—â–∏–∫–∞:', inboxId);
        } else {
            this.emailCache.clear();
            console.log('–í–µ—Å—å –∫—ç—à –ø–∏—Å–µ–º –æ—á–∏—â–µ–Ω');
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
     */
    clearExpiredCache() {
        const now = Date.now();
        for (const [key, value] of this.emailCache.entries()) {
            if (now - value.timestamp > this.cacheExpiry) {
                this.emailCache.delete(key);
                console.log('–£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à:', key);
            }
        }
    }

    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∏—Å—å–º–æ
     * @param {string} emailId - ID –ø–∏—Å—å–º–∞
     */
    async viewEmail(emailId) {
        try {
            const email = await this.api.getEmail(emailId);
            this.ui.showEmailViewer(email);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å—å–º–∞:', error);
            this.ui.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å—å–º–∞', 'error');
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –ø–∏—Å—å–º–æ
     * @param {string} emailId - ID –ø–∏—Å—å–º–∞
     */
    async deleteEmail(emailId) {
        try {
            if (!confirm(this.i18n.t('confirm_delete_email'))) {
                return;
            }
            
            await this.api.deleteEmail(emailId);
            
            this.emails = this.emails.filter(email => email.id !== emailId);
            this.ui.updateEmailsList(this.emails);
            
            this.ui.showToast(this.i18n.t('email_deleted_success'), 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞:', error);
            this.ui.showToast(this.i18n.t('error_deleting_email'), 'error');
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ
     * @param {Object} emailData - –î–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
     */
    async sendEmail(emailData) {
        try {
            if (!this.currentInboxId) {
                this.ui.showToast('–í—ã–±–µ—Ä–∏—Ç–µ —è—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏', 'warning');
                return;
            }
            
            await this.api.sendEmail(this.currentInboxId, emailData);
            this.ui.showToast(this.i18n.t('email_sent_success'), 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:', error);
            this.ui.showToast(this.i18n.t('error_sending_email'), 'error');
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –∏–∑ —è—â–∏–∫–∞
     * @param {string} inboxId - ID —è—â–∏–∫–∞
     */
    sendEmailFromInbox(inboxId) {
        this.currentInboxId = inboxId;
        this.ui.showModal('send-email-modal');
    }

    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async generateUserData() {
        try {
            const countrySelector = document.getElementById('country-selector');
            const stateSelector = document.getElementById('state-selector');
            const dataContainer = document.getElementById('generated-data');
            
            if (!countrySelector || !stateSelector || !dataContainer) {
                throw new Error('–≠–ª–µ–º–µ–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

            const country = countrySelector.value;
            const state = stateSelector.value;

            if (!country || !state) {
                this.ui.showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ —à—Ç–∞—Ç/—Ä–µ–≥–∏–æ–Ω', 'warning');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            dataContainer.innerHTML = `
                <div class="loading-state">
                    <div class="loading-spinner"></div>
                    <p>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AI...</p>
                </div>
            `;

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∞–¥—Ä–µ—Å–æ–º —á–µ—Ä–µ–∑ Gemini API
            const userData = await this.generator.generateUserDataWithAddress(country, state);
            const formattedData = this.generator.formatDataForDisplay(userData);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            dataContainer.innerHTML = formattedData;
            this.ui.showToast('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
            
            return userData;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.ui.showToast('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const dataContainer = document.getElementById('generated-data');
            if (dataContainer) {
                dataContainer.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h3>
                        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É/—à—Ç–∞—Ç</p>
                    </div>
                `;
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º API
     * @param {string} mode - –†–µ–∂–∏–º API
     */
    switchApiMode(mode) {
        this.api.switchApiMode(mode);
        this.api.keyManager.setApiMode(mode);
        this.ui.showToast(`–†–µ–∂–∏–º API –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${mode}`, 'info');
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API –∫–ª—é—á
     * @param {string} key - API –∫–ª—é—á
     */
    updatePersonalApiKey(key) {
        this.api.keyManager.setPersonalApiKey(key);
        this.api.personalApiKey = key;
        this.ui.showToast(this.i18n.t('api_key_updated_success'), 'success');
    }

    /**
     * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —è—â–∏–∫–∞
     * @param {string} inboxId - ID —è—â–∏–∫–∞
     */
    scheduleInboxDeletion(inboxId) {
        setTimeout(async () => {
            try {
                await this.api.deleteInbox(inboxId);
                this.inboxes = this.inboxes.filter(inbox => inbox.id !== inboxId);
                this.ui.updateInboxesList(this.inboxes);
                this.ui.updateInboxSelector(this.inboxes);
                console.log(`–Ø—â–∏–∫ ${inboxId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω`);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —è—â–∏–∫–∞:', error);
            }
        }, this.settings.inboxLifetime);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
     */
    setupAutoTasks() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(async () => {
            if (this.currentInboxId && this.settings.enableNotifications) {
                try {
                    const newEmail = await this.api.waitForLatestEmail(this.currentInboxId, 1);
                    if (newEmail) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Å—å–º–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º
                        const emailKey = this.createEmailKey(newEmail);
                        const isDuplicate = this.emails.some(email => this.createEmailKey(email) === emailKey);
                        
                        if (!isDuplicate) {
                            this.emails.unshift(newEmail);
                            this.ui.updateEmailsList(this.emails);
                            this.ui.showToast('–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ!', 'info');
                        } else {
                            console.log('–ü–æ–ª—É—á–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç –ø–∏—Å—å–º–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º:', newEmail.subject || '(–ë–µ–∑ —Ç–µ–º—ã)');
                        }
                    }
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
                }
            }
        }, 30000);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.checkApiConnection();
        }, 5 * 60 * 1000);
        
        // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.clearExpiredCache();
        }, 10 * 60 * 1000);
    }

    /**
     * –°–∫–∞—á–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ
     * @param {string} attachmentId - ID –≤–ª–æ–∂–µ–Ω–∏—è
     * @param {string} filename - –ò–º—è —Ñ–∞–π–ª–∞
     */
    async downloadAttachment(attachmentId, filename = 'attachment') {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            this.ui.showToast('–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è...', 'info');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            this.updateDownloadButton(attachmentId, 'loading');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–æ–∂–µ–Ω–∏–∏
            const attachmentInfo = await this.getAttachmentInfo(attachmentId);
            
            if (attachmentInfo) {
                this.ui.showToast(`–°–∫–∞—á–∏–≤–∞–µ–º ${attachmentInfo.filename || filename} (${this.formatFileSize(attachmentInfo.size || 0)})...`, 'info');
            }
            
            await this.api.downloadAttachment(attachmentId, filename);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            this.updateDownloadButton(attachmentId, 'success');
            this.ui.showToast('–í–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!', 'success');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è:', error);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            this.updateDownloadButton(attachmentId, 'error');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è';
            if (error.message.includes('404')) {
                errorMessage = '–í–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
            } else if (error.message.includes('403')) {
                errorMessage = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–ª–æ–∂–µ–Ω–∏—é';
            } else if (error.message.includes('401')) {
                errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
            } else if (error.message.includes('timeout')) {
                errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
            } else {
                errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
            }
            
            this.ui.showToast(errorMessage, 'error');
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–æ–∂–µ–Ω–∏–∏
     * @param {string} attachmentId - ID –≤–ª–æ–∂–µ–Ω–∏—è
     * @returns {Promise<Object|null>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–æ–∂–µ–Ω–∏–∏
     */
    async getAttachmentInfo(attachmentId) {
        try {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∏—Å—å–º–∞
            for (const email of this.emails) {
                if (email.attachments) {
                    const attachment = email.attachments.find(att => att.id === attachmentId);
                    if (attachment) {
                        return attachment;
                    }
                }
            }
            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–ª–æ–∂–µ–Ω–∏–∏:', error);
            return null;
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
     * @param {string} attachmentId - ID –≤–ª–æ–∂–µ–Ω–∏—è
     * @param {string} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ (loading, success, error, normal)
     */
    updateDownloadButton(attachmentId, state) {
        const attachmentItem = document.querySelector(`[data-attachment-id="${attachmentId}"]`);
        if (!attachmentItem) return;

        const button = attachmentItem.querySelector('.download-btn');
        if (!button) return;

        const icon = button.querySelector('i');
        
        switch (state) {
            case 'loading':
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...';
                button.classList.add('loading');
                break;
            case 'success':
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-check"></i> –°–∫–∞—á–∞–Ω–æ';
                button.classList.remove('loading');
                button.classList.add('success');
                setTimeout(() => {
                    button.innerHTML = '<i class="fas fa-download"></i>';
                    button.classList.remove('success');
                }, 2000);
                break;
            case 'error':
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-exclamation-triangle"></i> –û—à–∏–±–∫–∞';
                button.classList.remove('loading');
                button.classList.add('error');
                setTimeout(() => {
                    button.innerHTML = '<i class="fas fa-download"></i>';
                    button.classList.remove('error');
                }, 3000);
                break;
            default:
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-download"></i>';
                button.classList.remove('loading', 'success', 'error');
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
     * @param {number} bytes - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
     */
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    getAppStats() {
        return {
            inboxes: this.inboxes.length,
            emails: this.emails.length,
            apiStatus: this.api.getPublicKeyPoolStatus(),
            settings: this.settings,
            currentLanguage: this.i18n.getCurrentLanguage()
        };
    }

    /**
     * –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
     */
    resetAllData() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?')) {
            localStorage.clear();
            this.inboxes = [];
            this.emails = [];
            this.currentInboxId = null;
            
            this.ui.updateInboxesList(this.inboxes);
            this.ui.updateEmailsList(this.emails);
            this.ui.updateInboxSelector(this.inboxes);
            
            this.ui.showToast('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
     */
    exportData() {
        const data = {
            inboxes: this.inboxes,
            emails: this.emails,
            settings: this.settings,
            exportDate: new Date().toISOString()
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `neuroMail-export-${Date.now()}.json`;
        link.click();
        
        URL.revokeObjectURL(url);
        this.ui.showToast('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    }

    /**
     * –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
     * @param {File} file - –§–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
     */
    async importData(file) {
        try {
            const text = await file.text();
            const data = JSON.parse(text);
            
            if (data.inboxes) this.inboxes = data.inboxes;
            if (data.emails) this.emails = data.emails;
            if (data.settings) this.settings = { ...this.settings, ...data.settings };
            
            this.ui.updateInboxesList(this.inboxes);
            this.ui.updateEmailsList(this.emails);
            this.ui.updateInboxSelector(this.inboxes);
            
            this.saveSettings();
            this.ui.showToast('–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.ui.showToast('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }

    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å email –∞–¥—Ä–µ—Å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     * @param {string} email - Email –∞–¥—Ä–µ—Å
     */
    async copyEmailToClipboard(email) {
        try {
            await navigator.clipboard.writeText(email);
            this.ui.showToast(`Email —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${email}`, 'success');
        } catch (error) {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = email;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            this.ui.showToast(`Email —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${email}`, 'success');
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
window.copyToClipboard = async function(text) {
    try {
        await navigator.clipboard.writeText(text);
        if (window.mailSlurpApp) {
            window.mailSlurpApp.ui.showToast('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
        }
    } catch (error) {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        if (window.mailSlurpApp) {
            window.mailSlurpApp.ui.showToast('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
        }
    }
};

window.togglePassword = function(button) {
    const passwordText = button.parentElement.querySelector('.password-text');
    const icon = button.querySelector('i');
    
    if (passwordText.style.filter === 'blur(5px)') {
        passwordText.style.filter = 'none';
        icon.className = 'fas fa-eye-slash';
        button.title = '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å';
    } else {
        passwordText.style.filter = 'blur(5px)';
        icon.className = 'fas fa-eye';
        button.title = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å';
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.mailSlurpApp = new MailSlurpApp();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MailSlurpApp;
}
